docker-and-kubernetes-udemy course
Multi-Step Docker Builds

Production environment is not suppose to use dev server as it's not appropriate. 
Dev Server falls away because it's really not appropriate to be running in a production environment.
It has a ton of processing power inside of it dedicated to processing these javascript files that we're
putting together and that's something that we do not need to do when we are running in production because
we're no longer making any changes to the javascript code of our project.
Nginx is a extremely-popular web-server it doesn't have a lot of logic tied to it. It just really about 
taking a traffic and somehow re-route it or respond to it with some static files, which is exactly what's 
needed in this tutorial. 
So, in our production Dockerfile we are going to take advantage of Nginx image from Docer Hub.
On the other hand we've already decided to use alpine (we do have to rune "npm run build" command).
We are goint to to have installed all dependencies from package.json file.
BUT! deps only needed to execute "npm run build"! Those 200Mb deps are only for build, once the app is 
built those are not required. So, the only files from the whole build output that required are gonna be 
in ./frontend/build directory after the build. And it would be really nice to avoid those 200Mb 
worth of deps. 

We're going to build a Dockerfile that has something called a multi step build process. 
Inside this Dockerfile we're going to have two different blocks of configuration (for two different base images).

1. Build phase
  Use node:alpine
  Copy the package.jason file
  Install deps
  Run "npm run build"
2. Run phase
  Use Nginx
  Copy over the result of "npm run build"
  Start Nginx (starts automatically if use Nginx image from Docker Hub)
